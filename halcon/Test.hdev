<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.0" halcon_version="11.0.2.1" cs="140987830">
<procedure name="main">
<interface/>
<body>
<c>*单通道像素 50W</c>
<l>picPix := 0</l>
<c>*正方形像素</c>
<l>cubeEdges := 500</l>
<c>*正方形实际长度mm</c>
<l>cubeLength := 173.0</l>
<c>*比例</c>
<l>ratio := cubeLength/cubeEdges</l>
<c>*实际线段长度mm</c>
<l>lineLength := 100</l>
<c></c>
<c as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,1]" as_ord="1">* Image Acquisition 02: Code generated by Image Acquisition 02</c>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,2]" as_ord="1">list_files ('../pic/line', ['files','follow_links','recursive'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,3]" as_ord="1">tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima)$','ignore_case'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[2,2]" as_ord="1">for Index := 0 to |ImageFiles| - 1 by 1</l>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[2,3]" as_ord="1">    read_image (Image, ImageFiles[Index])</l>
<c as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[2,4]" as_ord="1">    * Image Acquisition 02: Do something</c>
<c>    </c>
<l>    get_image_size (Image, Width, Height)</l>
<l>    picPix := Width*Height</l>
<c>    * 显示设置</c>
<l>    dev_close_window ()</l>
<l>    dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<l>    dev_set_draw ('fill')</l>
<l>    dev_display (Image)</l>
<c>    </c>
<c>    *1、截取原图的重要边缘</c>
<l>    decompose3 (Image, ImageR, ImageG, ImageB)</l>
<l>    add_image (ImageB, ImageB, ImageResult, 0.5, -100)</l>
<l>    threshold (ImageResult, Regions, 0, 30)</l>
<l>    connection (Regions, ConnectedRegions)</l>
<l>    select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 100000, 999999)</l>
<l>    shape_trans (SelectedRegions, RegionTrans, 'convex')</l>
<l>    boundary (RegionTrans, RegionBorder, 'inner')</l>
<l>    dilation_rectangle1 (RegionBorder, RegionDilation, 7, 7)</l>
<l>    reduce_domain (Image, RegionDilation, ImageReduced)</l>
<c></c>
<c>    *2、亚像素顺时针获取四边形的角点</c>
<l>    edges_color_sub_pix (ImageReduced, Edges, 'canny', 1, 20, 40)</l>
<l>    segment_contours_xld (Edges, ContoursSplit, 'lines', 10, 10, 2)</l>
<l>    union_collinear_contours_xld (ContoursSplit, UnionContours, 30, 2, 9, 0.7, 'attr_keep')</l>
<l>    sort_center_contour_xld (UnionContours, OrderedXLDs)</l>
<l>    fit_line_contour_xld (OrderedXLDs, 'tukey', -1, 0, 5, 2, RowBegin, ColBegin, RowEnd, ColEnd, Nr, Nc, Dist)</l>
<l>    Rows := []</l>
<l>    Columns := []</l>
<l>    for J := 0 to 3 by 1</l>
<l>        intersection_lines (RowBegin[J], ColBegin[J], RowEnd[J], ColEnd[J], RowBegin[(J + 1) % 4], ColBegin[(J + 1) % 4], RowEnd[(J + 1) % 4], ColEnd[(J + 1) % 4], Row, Column, IsOverlapping)</l>
<l>        Rows := [Rows,Row]</l>
<l>        Columns := [Columns,Column]</l>
<l>    endfor</l>
<l>    gen_cross_contour_xld (Edges, Rows, Columns, 30, 0.785398)</l>
<c>    </c>
<c>    *右上角为第一个点，顺时针，透视变换</c>
<l>    vector_to_proj_hom_mat2d (Rows, Columns, [0,cubeEdges,cubeEdges,0], [cubeEdges,cubeEdges,0,0], 'normalized_dlt', [], [], [], [], [], [], HomMat2D, Covariance)</l>
<l>    projective_trans_image_size (Image, TransImage, HomMat2D, 'bilinear', cubeEdges, cubeEdges, 'false')</l>
<l>    projective_trans_contour_xld (OrderedXLDs, ContoursProjTrans, HomMat2D)</l>
<c>    </c>
<c>    *分割需要测量直线</c>
<l>    rgb1_to_gray (TransImage, ImageGray)</l>
<l>    threshold (ImageGray, Regions1, 0, 180)</l>
<l>    connection (Regions1, ConnectedRegions1)</l>
<l>    select_shape (ConnectedRegions1, SelectedRegions1, ['area','contlength'], 'and', [500,500], [3000,3000])</l>
<l>    dilation_rectangle1 (SelectedRegions1, RegionDilation1, 10, 10)</l>
<l>    reduce_domain (TransImage, RegionDilation1, ImageReduced1)</l>
<c>    </c>
<c>    *拟合直线测量</c>
<l>    lines_gauss (ImageReduced1, Lines, 1.0, 1, 3, 'dark', 'true', 'true', 'true')</l>
<l>    fit_line_contour_xld (Lines, 'tukey', -1, 0, 5, 2, RowBegin, ColBegin, RowEnd, ColEnd, Nr, Nc, Dist)</l>
<l>    gen_contour_polygon_xld (Contour, [RowBegin,RowEnd], [ColBegin,ColEnd])</l>
<l>    distance_pp (RowBegin, ColBegin, RowEnd, ColEnd, Length)</l>
<l>    cuLength := ratio*Length</l>
<l>    tuple_max (cuLength, cuLength)</l>
<l>    actualError := lineLength - cuLength</l>
<l>    tuple_abs (actualError, actualError)</l>
<c>    </c>
<c>    * 显示设置</c>
<l>    dev_display (Image)</l>
<l>    dev_open_window (0, 0, cubeEdges, cubeEdges, 'black', WindowHandle0)</l>
<l>    dev_set_draw ('fill')</l>
<l>    dev_display (TransImage)</l>
<l>    dev_display (Contour)</l>
<l>    disp_message (WindowHandle0, '实际误差(mm)：' + actualError, 'window', 12, 12, 'black', 'true')</l>
<l>    stop()</l>
<c>  </c>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[3,1]" as_ord="1">endfor</l>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="sort_center_contour_xld">
<interface>
<io>
<par name="SelectedContours"/>
</io>
<oo>
<par name="OrderedXLDs"/>
</oo>
</interface>
<body>
<l>area_center_points_xld (SelectedContours, Area, XLDRow, XLDColumn)</l>
<l>RowCenter := (max(XLDRow) + min(XLDRow)) / 2</l>
<l>ColumnCenter := (max(XLDColumn) + min(XLDColumn)) / 2</l>
<l>gen_cross_contour_xld (Cross, RowCenter, ColumnCenter, 6, 0.785398)</l>
<l>tuple_atan2 (XLDRow - RowCenter, XLDColumn - ColumnCenter, Angle)</l>
<l>tuple_sort_index (Angle, Indices)</l>
<l>gen_empty_obj (OrderedXLDs)</l>
<l>for c := 0 to |XLDRow| - 1 by 1</l>
<l>    select_obj (SelectedContours, Contour, Indices[c] + 1)</l>
<l>    concat_obj (OrderedXLDs, Contour, OrderedXLDs)</l>
<l>    dev_display (Contour)</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="sort_center_contour_xld">
<short lang="en_US">sorts xld contours clockwise regarding their orientation with respect to a given center point</short>
<short lang="zh_CN">sorts xld contours clockwise regarding their orientation with respect to a given center point</short>
<parameters>
<parameter id="OrderedXLDs"/>
<parameter id="SelectedContours"/>
</parameters>
</docu>
</procedure>
</hdevelop>
